digraph g {
  // STYLING
  rankdir=RL;
  graph [ fontname = "sans-serif",
          fontsize = 24,
          label = "\n\nVulkan\nStructure creation\ndependency graph",
          ];
  
  node [  shape = rectangle,
          style = filled,
          color = "#302840",
          fillcolor = "#E0DDFF",
          fontname = "helvetica",
          fontsize = 12 ];
  
  // Graph Contrete Styling
  "VfSwapchainBuffer{} (InitializeDeviceSurface)" [fillcolor = "#AABBFF"];
  "VfDepthBuffer{} (CreateDepthBuffer)" [fillcolor = "#AABBFF"];
  "VfUniformBuffer{} (CreateUniformBuffer)" [fillcolor = "#AABBFF"];
  "VfVertexBuffer{} (CreateVertexBuffer)" [fillcolor = "#AABBFF"];
  
  "(BeginCommandBuffer)" [fillcolor = "#DDFFDD"];
  "(ExecuteQueueCommandBuffer)" [fillcolor = "#DDFFDD"];
  "GLSLtoSPV" [fillcolor = "#DDFFDD"];
  
  "DRAW" [fillcolor = "#B0FF77", fontname = "helvetica bold", fontsize = 18 ];
  
  "MVP" [fillcolor = "#FFDDDD"];
  "HWND window (SDL)" [fillcolor = "#FFDDDD"];
  "Mesh Info" [fillcolor = "#FFDDDD"];
  
  "d0" [fillcolor = "#000000", fontsize = 0];
  "d1" [fillcolor = "#000000", fontsize = 0];
  "d2" [fillcolor = "#000000", fontsize = 0];
  "d3" [fillcolor = "#000000", fontsize = 0];
  "d4" [fillcolor = "#000000", fontsize = 0];
  //"d5" [fillcolor = "#000000", fontsize = 0];
  "d6" [fillcolor = "#000000", fontsize = 0];
  "d7" [fillcolor = "#000000", fontsize = 0];
  //"d8" [fillcolor = "#000000", fontsize = 0];
  //"d9" [fillcolor = "#000000", fontsize = 0];
  
  "d0" -> "VkDevice (CreateDevice)";
  "d1" -> "VkDevice (CreateDevice)";
  "d2" -> "VkDevice (CreateDevice)";
  "d3" -> "VkDevice (CreateDevice)";
  "d4" -> "VkDevice (CreateDevice)";
  //"d5" -> "VkDevice (CreateDevice)";
  "d6" -> "VkDevice (CreateDevice)";
  "d7" -> "VkDevice (CreateDevice)";
  //"d8" -> "VkDevice (CreateDevice)";
  //"d9" -> "VkDevice (CreateDevice)";
  
  "d0" -> "VkDevice (CreateDevice)";
  "d1" -> "VkDevice (CreateDevice)";
  "d2" -> "VkDevice (CreateDevice)";
  "d3" -> "VkDevice (CreateDevice)";
  "d4" -> "VkDevice (CreateDevice)";
  //"d5" -> "VkDevice (CreateDevice)";
  "d6" -> "VkDevice (CreateDevice)";
  "d7" -> "VkDevice (CreateDevice)";
  //"d8" -> "VkDevice (CreateDevice)";
  //"d9" -> "VkDevice (CreateDevice)";
  
  // Graph start
  "VkPhysicalDevice[] (CheckDevices)" -> "VkInstance (CreateInstance)";
  "VkQueueFamilyProperties[] (TryGetGraphicQueue)" -> "VkPhysicalDevice[] (CheckDevices)";
  "VkPhysicalDeviceMemoryProperties (TryGetGraphicQueue)" -> "VkPhysicalDevice[] (CheckDevices)";
  "VkPhysicalDeviceProperties (TryGetGraphicQueue)" -> "VkPhysicalDevice[] (CheckDevices)";
  
  "VkDeviceQueueCreateInfo (TryGetGraphicQueue)" -> "VkPhysicalDevice[] (CheckDevices)";
  "VkDevice (CreateDevice)" -> "VkDeviceQueueCreateInfo (TryGetGraphicQueue)";
  "VkDevice (CreateDevice)" -> "VkPhysicalDevice[] (CheckDevices)";
  
  // SWAP CHAIN
  subgraph cluster_0 {
    node [style=filled];
    color="#222222";
    style=filled;
    fillcolor = "#EEEEEE";
    fontsize = 15;
    label = "Swap Chain";
  
    "VkSurfaceKHR (CreateSurfaceDescription)" -> "HWND window (SDL)";
    "VkFormat (InitializeDeviceSurface)" -> "VkSurfaceKHR (CreateSurfaceDescription)";
    "VkSwapchainKHR (InitializeDeviceSurface)" -> "VkFormat (InitializeDeviceSurface)";
    "VkSwapchainKHR (InitializeDeviceSurface)" -> "VkSurfaceKHR (CreateSurfaceDescription)";
    "VkImage (InitializeDeviceSurface)" -> "VkSwapchainKHR (InitializeDeviceSurface)";
    "VkImageView (InitializeDeviceSurface)" -> "VkImage (InitializeDeviceSurface)";
    "VfSwapchainBuffer{} (InitializeDeviceSurface)" -> "VkImage (InitializeDeviceSurface)";
    "VfSwapchainBuffer{} (InitializeDeviceSurface)" -> "VkImageView (InitializeDeviceSurface)";
    "d0";
  }
  
  "VkSurfaceKHR (CreateSurfaceDescription)" -> "VkInstance (CreateInstance)";
  "VkFormat (InitializeDeviceSurface)" -> "VkPhysicalDevice[] (CheckDevices)";
  "VkImage (InitializeDeviceSurface)" -> "d0";
  "VkImageView (InitializeDeviceSurface)" -> "d0";
  "VkSwapchainKHR (InitializeDeviceSurface)" -> "d0";
  
  // COMMAND BUFFER
  subgraph cluster_1 {
    node [style=filled];
    color="#228822";
    style=filled;
    fillcolor = "#EEFFEE";
    fontsize = 15;
    label = "Command Buffer";
    "VkCommandBuffer (CreateCommandBuffer)" -> "VkCommandPool (CreateCommandPool)";
    "(BeginCommandBuffer)" -> "VkCommandBuffer (CreateCommandBuffer)";
    "(ExecuteQueueCommandBuffer)" -> "VkQueue (PopulateSwapChainImages)";
    "(ExecuteQueueCommandBuffer)" -> "VkCommandBuffer (CreateCommandBuffer)";
    "d1";
  }
  
  "VkCommandPool (CreateCommandPool)" -> "d1";
  "VkCommandBuffer (CreateCommandBuffer)" -> "d1";
  
  "(ExecuteQueueCommandBuffer)" -> "d1";
  "VkQueue (PopulateSwapChainImages)" -> "d1";
  
  
  
  // DEPTH BUFFER
  subgraph cluster_2 {
    node [style=filled];
    color="#228822";
    style=filled;
    fillcolor = "#EEFFEE";
    fontsize = 15;
    label = "Depth Buffer";
    "VkDeviceMemory (CreateDepthBuffer)" -> "VkImage (CreateDepthBuffer)";
    "VkImageView (CreateDepthBuffer)" -> "VkImage (CreateDepthBuffer)";
  
    "VfDepthBuffer{} (CreateDepthBuffer)" -> "VkImage (CreateDepthBuffer)";
    "VfDepthBuffer{} (CreateDepthBuffer)" -> "VkImageView (CreateDepthBuffer)";
    "VfDepthBuffer{} (CreateDepthBuffer)" -> "VkDeviceMemory (CreateDepthBuffer)";
    "VfDepthBuffer{} (CreateDepthBuffer)" -> "VkFormat (CreateDepthBuffer)";
    "d2";
  }
  
  "VkImage (CreateDepthBuffer)" -> "d2";
  "VkImage (CreateDepthBuffer)" -> "VkPhysicalDevice[] (CheckDevices)";
  "VkDeviceMemory (CreateDepthBuffer)" -> "VkPhysicalDeviceMemoryProperties (TryGetGraphicQueue)";

  "VkDeviceMemory (CreateDepthBuffer)" ->  "d2";
  "VkImageView (CreateDepthBuffer)" -> "d2";
  
  
   // UNIFORM BUFFER
  subgraph cluster_3 {
    node [style=filled];
    color="#228822";
    style=filled;
    fillcolor = "#EEFFEE";
    fontsize = 15;
    label = "Uniform Buffer";
    
    "VkBuffer (CreateUniformBuffer)" -> "MVP";
    
    "VkDeviceMemory (CreateUniformBuffer)" -> "VkBuffer (CreateUniformBuffer)";
    
    "VkDescriptorBufferInfo (CreateUniformBuffer)" -> "VkBuffer (CreateUniformBuffer)";
    "VkDescriptorBufferInfo (CreateUniformBuffer)" -> "MVP";
  
    "VfUniformBuffer{} (CreateUniformBuffer)" -> "VkBuffer (CreateUniformBuffer)";
    "VfUniformBuffer{} (CreateUniformBuffer)" -> "VkDescriptorBufferInfo (CreateUniformBuffer)";
    "VfUniformBuffer{} (CreateUniformBuffer)" -> "VkDeviceMemory (CreateUniformBuffer)"; 
    "d3";
  }
  
  "VkBuffer (CreateUniformBuffer)" -> "d3";
  "VkDeviceMemory (CreateUniformBuffer)" -> "d3";
  "VkDeviceMemory (CreateUniformBuffer)" -> "VkPhysicalDeviceMemoryProperties (TryGetGraphicQueue)";
  
  
   // Pipeline & renderpass
  subgraph cluster_4 {
    node [style=filled];
    color="#000000";
    fontsize = 15;
    label = "Pipeline & RenderPass";
    
    "VkPipelineLayout (CreatePipelineLayout)" -> "VkDescriptorSetLayout[] (CreatePipelineLayout)";
    "VkRenderPass (InitRenderPass)";
    "VkPipelineShaderStageCreateInfo[] (InitShaders)";
    "VkPipelineShaderStageCreateInfo[] (InitShaders)" -> "GLSLtoSPV";
    "d4";
  }
  
  "VkDescriptorSetLayout[] (CreatePipelineLayout)" -> "d4";
  "VkPipelineLayout (CreatePipelineLayout)" -> "d4";
  "VkPipelineShaderStageCreateInfo[] (InitShaders)" -> "d4";
  "VkRenderPass (InitRenderPass)" -> "d4";
  "VkRenderPass (InitRenderPass)" -> "VkFormat (InitializeDeviceSurface)";
  "VkRenderPass (InitRenderPass)" -> "VkFormat (CreateDepthBuffer)";
  
  // InitPipeline 
  /* susceptible de ser separado o junto con el anterior
       - para separarlo llamarlos cluster 4 y 5 respectivamente
       - para mantenerlos juntos los dos han de ser cluster 4
   */
  subgraph cluster_4 {
    node [style=filled];
    color="#000000";
    fontsize = 15;
    label = "Init Pipeline";
    
    "VkPipeline (InitPipeline)" -> "VkPipelineCache (InitPipeline)";
    "d4";
  }
  "VkPipelineCache (InitPipeline)" -> "d4";
  
  "VkPipeline (InitPipeline)" -> "d4";
  "VkPipeline (InitPipeline)" -> "VkRenderPass (InitRenderPass)";
  "VkPipeline (InitPipeline)" -> "VkPipelineShaderStageCreateInfo[] (InitShaders)";
  "VkPipeline (InitPipeline)" -> "VkPipelineLayout (CreatePipelineLayout)";
  "VkPipeline (InitPipeline)" -> "VkVertexInputBindingDescription (CreateVertexBuffer)" ;
  "VkPipeline (InitPipeline)" -> "VkVertexInputAttributeDescription[] (CreateVertexBuffer)";
  
  // Framebuffers
  "VkFramebuffer[] (InitFrameBuffer)" -> "d4";
  "VkFramebuffer[] (InitFrameBuffer)" -> "VkRenderPass (InitRenderPass)";
  "VkFramebuffer[] (InitFrameBuffer)" -> "VkImageView (CreateDepthBuffer)";
  "VkFramebuffer[] (InitFrameBuffer)" -> "VkImageView (InitializeDeviceSurface)";
  
  // Vertexbuffer
  subgraph cluster_6 {
    node [style=filled];
    color="#228822";
    style=filled;
    fillcolor = "#EEFFEE";
    fontsize = 15;
    label = "Vertex Buffer";
    
    "VkBuffer (CreateVertexBuffer)" -> "Mesh Info";
    "VkDeviceMemory (CreateVertexBuffer)" -> "VkBuffer (CreateVertexBuffer)";
    
    "VfVertexBuffer{} (CreateVertexBuffer)" -> "VkBuffer (CreateVertexBuffer)";
    "VfVertexBuffer{} (CreateVertexBuffer)" -> "VkDeviceMemory (CreateVertexBuffer)";
    "VkVertexInputAttributeDescription[] (CreateVertexBuffer)";
    "VkVertexInputBindingDescription (CreateVertexBuffer)" -> "Mesh Info";
    "d6";
  }
  "VkBuffer (CreateVertexBuffer)" -> "d6";

  "VkDeviceMemory (CreateVertexBuffer)" -> "d6";
  "VkDeviceMemory (CreateVertexBuffer)" -> "VkPhysicalDeviceMemoryProperties (TryGetGraphicQueue)";

  // AllocateDescriptorSet
  subgraph cluster_7 {
    node [style=filled];
    color="#000000";
    fontsize = 15;
    label = "Descriptor Pool";
    
    "VkDescriptorSet[] (AllocateDescriptorSet)" -> "VkDescriptorPool (AllocateDescriptorSet)";
    "d7";
  }
  "VkDescriptorPool (AllocateDescriptorSet)" -> "d7";
  
  "VkDescriptorSet[] (AllocateDescriptorSet)" -> "d7";
  "VkDescriptorSet[] (AllocateDescriptorSet)" -> "VkDescriptorSetLayout[] (CreatePipelineLayout)";
  
  
  
  // Draw Cube
  "DRAW" -> "VkDevice (CreateDevice)";
  "DRAW" -> "VkVertexInputAttributeDescription[] (CreateVertexBuffer)";
  "DRAW" -> "VkSwapchainKHR (InitializeDeviceSurface)";
  "DRAW" -> "VkRenderPass (InitRenderPass)";
  "DRAW" -> "VkFramebuffer[] (InitFrameBuffer)";
  "DRAW" -> "VkCommandBuffer (CreateCommandBuffer)";
  "DRAW" -> "VkPipeline (InitPipeline)";
  "DRAW" -> "VkPipelineLayout (CreatePipelineLayout)";
  "DRAW" -> "VkDescriptorSet[] (AllocateDescriptorSet)";
  "DRAW" -> "VkBuffer (CreateVertexBuffer)";
  "DRAW" -> "VkImage (InitializeDeviceSurface)";
  "DRAW" -> "VkQueue (PopulateSwapChainImages)";
  "DRAW" -> "VkViewport (DrawCube)";
  
  "VkViewport (DrawCube)" -> "VkCommandBuffer (CreateCommandBuffer)";
}



























